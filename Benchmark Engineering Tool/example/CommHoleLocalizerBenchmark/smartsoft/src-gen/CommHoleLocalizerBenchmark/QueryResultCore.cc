//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "CommHoleLocalizerBenchmark/QueryResultCore.hh"

// serialization/deserialization operators
//#include "CommHoleLocalizerBenchmark/QueryResultACE.hh"

// include the hash.idl containing the hash constant
#include "hash.hh"
#include <assert.h>
#include <cstring>
#include <iostream>

// SmartUtils used in from_xml method
#include "smartKnuthMorrisPratt.hh"

#ifdef ENABLE_HASH
	#include <boost/functional/hash.hpp>
#endif

namespace CommHoleLocalizerBenchmark 
{
	const char* QueryResultCore::getCompiledHash()
	{
		return CommHoleLocalizerBenchmarkIDL::REPO_HASH;
	}
	
	void QueryResultCore::getAllHashValues(std::list<std::string> &hashes)
	{
		// get own hash value
		hashes.push_back(getCompiledHash());
		// get hash value(s) for CommHoleLocalizer::ImageDir(idl_QueryResult.directoriesList)
		CommHoleLocalizer::ImageDir::getAllHashValues(hashes);
	}
	
	void QueryResultCore::checkAllHashValues(std::list<std::string> &hashes)
	{
		// check own hash value
		if (strcmp(getCompiledHash(), hashes.front().c_str()) != 0)
		{
			std::cerr << "###################################################" << std::endl;
			std::cerr << "WARNING: HASHES OF COMMUNICATION OBJECTS MISSMATCH!" << std::endl;
			std::cerr << "QueryResultCore hash" << std::endl;
			std::cerr << "Expected: " << getCompiledHash() << std::endl;
			std::cerr << "Received: " << hashes.front() << std::endl;
			std::cerr << "###################################################" << std::endl;
		}
		assert(strcmp(getCompiledHash(), hashes.front().c_str()) == 0);
		hashes.pop_front();
		
		// check hash value(s) for CommHoleLocalizer::ImageDir(idl_QueryResult.directoriesList)
		CommHoleLocalizer::ImageDir::checkAllHashValues(hashes);
	}
	
	#ifdef ENABLE_HASH
	size_t QueryResultCore::generateDataHash(const DATATYPE &data)
	{
		size_t seed = 0;
		
		std::vector<CommHoleLocalizerIDL::ImageDir>::const_iterator data_directoriesListIt;
		for(data_directoriesListIt=data.directoriesList.begin(); data_directoriesListIt!=data.directoriesList.end(); data_directoriesListIt++) {
			seed += CommHoleLocalizer::ImageDir::generateDataHash(*data_directoriesListIt);
		}
		std::vector<ACE_CDR::Short>::const_iterator data_gtdIt;
		for(data_gtdIt=data.gtd.begin(); data_gtdIt!=data.gtd.end(); data_gtdIt++) {
			boost::hash_combine(seed, *data_gtdIt);
		}
		
		return seed;
	}
	#endif
	
	// default constructor
	QueryResultCore::QueryResultCore()
	:	idl_QueryResult()
	{  
		setDirectoriesList(std::vector<CommHoleLocalizer::ImageDir>());
		setGtd(std::vector<short>());
	}
	
	QueryResultCore::QueryResultCore(const DATATYPE &data)
	:	idl_QueryResult(data)
	{  }

	QueryResultCore::~QueryResultCore()
	{  }
	
	void QueryResultCore::to_ostream(std::ostream &os) const
	{
	  os << "QueryResult(";
	  std::vector<CommHoleLocalizer::ImageDir>::const_iterator directoriesListIt;
	  std::vector<CommHoleLocalizer::ImageDir> directoriesListList = getDirectoriesListCopy();
	  for(directoriesListIt=directoriesListList.begin(); directoriesListIt!=directoriesListList.end(); directoriesListIt++) {
	  	directoriesListIt->to_ostream(os);
	  }
	  std::vector<short>::const_iterator gtdIt;
	  std::vector<short> gtdList = getGtdCopy();
	  for(gtdIt=gtdList.begin(); gtdIt!=gtdList.end(); gtdIt++) {
	  	os << *gtdIt << " ";
	  }
	  os << ") ";
	}
	
	// convert to xml stream
	void QueryResultCore::to_xml(std::ostream &os, const std::string &indent) const {
		size_t counter = 0;
		
		std::vector<CommHoleLocalizer::ImageDir>::const_iterator directoriesListIt;
		std::vector<CommHoleLocalizer::ImageDir> directoriesListList = getDirectoriesListCopy();
		counter = 0;
		os << indent << "<directoriesListList n=\"" << directoriesListList.size() << "\">";
		for(directoriesListIt=directoriesListList.begin(); directoriesListIt!=directoriesListList.end(); directoriesListIt++) {
			os << indent << "<directoriesList i=\"" << counter++ << "\">";
			directoriesListIt->to_xml(os, indent);
			os << indent << "</directoriesList>";
		}
		os << indent << "</directoriesListList>";
		std::vector<short>::const_iterator gtdIt;
		std::vector<short> gtdList = getGtdCopy();
		counter = 0;
		os << indent << "<gtdList n=\"" << gtdList.size() << "\">";
		for(gtdIt=gtdList.begin(); gtdIt!=gtdList.end(); gtdIt++) {
			os << indent << "<gtd i=\"" << counter++ << "\">" << *gtdIt << "</gtd>";
		}
		os << indent << "</gtdList>";
	}
	
	// restore from xml stream
	void QueryResultCore::from_xml(std::istream &is) {
		size_t counter = 0;
		
		static const Smart::KnuthMorrisPratt kmp_directoriesListList("<directoriesListList n=\"");
		static const Smart::KnuthMorrisPratt kmp_directoriesList("\">");
		static const Smart::KnuthMorrisPratt kmp_gtdList("<gtdList n=\"");
		static const Smart::KnuthMorrisPratt kmp_gtd("\">");
		
		if(kmp_directoriesListList.search(is)) {
			size_t numberElements;
			is >> numberElements;
			CommHoleLocalizer::ImageDir directoriesListItem;
			std::vector<CommHoleLocalizer::ImageDir> directoriesListList;
			kmp_directoriesList.search(is);
			for(counter=0; counter<numberElements; counter++) {
				if(kmp_directoriesList.search(is)) {
					directoriesListItem.from_xml(is);
					directoriesListList.push_back(directoriesListItem);
				}
			}
			setDirectoriesList(directoriesListList);
		}
		if(kmp_gtdList.search(is)) {
			size_t numberElements;
			is >> numberElements;
			short gtdItem;
			std::vector<short> gtdList;
			kmp_gtd.search(is);
			for(counter=0; counter<numberElements; counter++) {
				if(kmp_gtd.search(is)) {
					is >> gtdItem;
					gtdList.push_back(gtdItem);
				}
			}
			setGtd(gtdList);
		}
	}
	
	/*
	void QueryResultCore::get(ACE_Message_Block *&msg) const
	{
		// start with a default internal buffer size(will automatically grow if needed)
		ACE_OutputCDR cdr(ACE_DEFAULT_CDR_BUFSIZE);
		
		CommHoleLocalizerBenchmarkIDL::HashList hashes;
		getAllHashValues(hashes);
		cdr << static_cast<ACE_CDR::Long>(hashes.size());
		for(CommHoleLocalizerBenchmarkIDL::HashList::const_iterator it=hashes.begin(); it!=hashes.end(); it++)
		{
			cdr << ACE_CString(it->c_str());
		}
		
		// Here the actual serialization takes place using the OutputCDR serialization operator<<
		// (see QueryResultACE.hh)
		cdr << idl_QueryResult;
		
	#ifdef ENABLE_HASH
		ACE_CDR::ULong data_hash = generateDataHash(idl_QueryResult);
		cdr << data_hash;
		// std::cout << "QueryResultCore: current data hash: " << data_hash << std::endl;
	#endif
		
		// return a shallow copy of the serialized message 
		// (no data is actually copied, only the internal reference counter is incremented)
		// in order to prevent memory leaks the caller of this get(msg) method must
		// manually free the memory by calling the release() method of the message block msg
		msg = cdr.begin()->duplicate();
	}
	
	void QueryResultCore::set(const ACE_Message_Block *msg)
	{
		ACE_InputCDR cdr(msg);
	
		CommHoleLocalizerBenchmarkIDL::HashList hashes;
		ACE_CDR::Long hashes_size;
		cdr >> hashes_size;
		for(int i=0; i<hashes_size; ++i) 
		{
			ACE_CString hash;
			cdr >> hash;
			hashes.push_back(hash.c_str());
		}
		checkAllHashValues(hashes);
		
		// Here the actual de-serialization takes place using the InputCDR serialization operator>>
		// (see QueryResultACE.hh)
		cdr >> idl_QueryResult;
		
	#ifdef ENABLE_HASH
		ACE_CDR::Long data_hash;
		cdr >> data_hash;
		ACE_CDR::Long own_hash = generateDataHash(idl_QueryResult);
		assert(data_hash == own_hash);
		// std::cout << "QueryResultCore: own data hash: " << own_hash << "; received data hash: " << data_hash << std::endl;
	#endif
	}
	*/
} /* namespace CommHoleLocalizerBenchmark */
