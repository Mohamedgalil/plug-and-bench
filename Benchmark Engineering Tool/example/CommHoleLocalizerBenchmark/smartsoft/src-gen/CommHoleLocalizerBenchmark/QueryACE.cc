//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "CommHoleLocalizerBenchmark/QueryACE.hh"
#include <ace/SString.h>

// serialization operator for element Query
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const CommHoleLocalizerBenchmarkIDL::Query &data)
{
	ACE_CDR::Boolean good_bit = true;
	// serialize list-element value
	good_bit = good_bit && cdr.write_short(data.value);
	// serialize list-element minHoleSize
	good_bit = good_bit && cdr.write_char(data.minHoleSize);
	// serialize list-element maxHoleSize
	good_bit = good_bit && cdr.write_char(data.maxHoleSize);
	// serialize list-element isMultipleHoles
	good_bit = good_bit && cdr.write_boolean(data.isMultipleHoles);
	// serialize list-element minPose
	good_bit = good_bit && cdr.write_char(data.minPose);
	// serialize list-element maxPose
	good_bit = good_bit && cdr.write_char(data.maxPose);
	// serialize list-element occlusion
	good_bit = good_bit && cdr.write_char(data.occlusion);
	// serialize list-element illumination
	good_bit = good_bit && cdr.write_char(data.illumination);
	
	return good_bit;
}

// de-serialization operator for element Query
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, CommHoleLocalizerBenchmarkIDL::Query &data)
{
	ACE_CDR::Boolean good_bit = true;
	// deserialize type element value
	good_bit = good_bit && cdr.read_short(data.value);
	// deserialize type element minHoleSize
	good_bit = good_bit && cdr.read_char(data.minHoleSize);
	// deserialize type element maxHoleSize
	good_bit = good_bit && cdr.read_char(data.maxHoleSize);
	// deserialize type element isMultipleHoles
	good_bit = good_bit && cdr.read_boolean(data.isMultipleHoles);
	// deserialize type element minPose
	good_bit = good_bit && cdr.read_char(data.minPose);
	// deserialize type element maxPose
	good_bit = good_bit && cdr.read_char(data.maxPose);
	// deserialize type element occlusion
	good_bit = good_bit && cdr.read_char(data.occlusion);
	// deserialize type element illumination
	good_bit = good_bit && cdr.read_char(data.illumination);
	
	return good_bit;
}

// serialization operator for CommunicationObject Query
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const CommHoleLocalizerBenchmark::Query &obj)
{
	return cdr << obj.get();
}

// de-serialization operator for CommunicationObject Query
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, CommHoleLocalizerBenchmark::Query &obj)
{
	return cdr >> obj.set();
}
