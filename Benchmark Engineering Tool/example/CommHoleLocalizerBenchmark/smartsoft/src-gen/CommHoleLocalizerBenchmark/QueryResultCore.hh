//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef COMMHOLELOCALIZERBENCHMARK_QUERYRESULT_CORE_H_
#define COMMHOLELOCALIZERBENCHMARK_QUERYRESULT_CORE_H_

#include "CommHoleLocalizerBenchmark/QueryResultData.hh"
#include "CommHoleLocalizer/ImageDir.hh"

#include <iostream>
#include <string>
#include <list>

namespace CommHoleLocalizerBenchmark {
	
class QueryResultCore {
protected:
	// data structure
	CommHoleLocalizerBenchmarkIDL::QueryResult idl_QueryResult;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef CommHoleLocalizerBenchmarkIDL::QueryResult DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	QueryResultCore();
	QueryResultCore(const DATATYPE &data);
	// default destructor
	virtual ~QueryResultCore();
	
	const DATATYPE& get() const { return idl_QueryResult; }
	operator const DATATYPE&() const { return idl_QueryResult; }
	DATATYPE& set() { return idl_QueryResult; }

	static inline std::string identifier(void) { return "CommHoleLocalizerBenchmark::QueryResult"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element DirectoriesList
	/**
	 * Getter methods for element idl_QueryResult.directoriesList of type vector<CommHoleLocalizer::ImageDir>
	 */
	inline std::vector<CommHoleLocalizer::ImageDir> getDirectoriesListCopy() const { 
		return std::vector<CommHoleLocalizer::ImageDir>(idl_QueryResult.directoriesList.begin(), idl_QueryResult.directoriesList.end());
	}
	inline CommHoleLocalizer::ImageDir getDirectoriesListElemAtPos(const size_t &pos) const {
		return CommHoleLocalizer::ImageDir(idl_QueryResult.directoriesList[pos]);
	}
	inline size_t getDirectoriesListSize() const { return idl_QueryResult.directoriesList.size(); }
	inline bool isDirectoriesListEmpty() const { return idl_QueryResult.directoriesList.empty(); }
	/**
	 * Setter methods for idl_QueryResult.directoriesList of type vector<CommHoleLocalizer::ImageDir>
	 */
	inline QueryResultCore& setDirectoriesList(const std::vector<CommHoleLocalizer::ImageDir> &directoriesList) { 
		idl_QueryResult.directoriesList.assign(directoriesList.begin(), directoriesList.end());
		return *this;
	}
	inline bool setDirectoriesListElemAtPos(const size_t &pos, const CommHoleLocalizer::ImageDir &elem) {
		if(pos < idl_QueryResult.directoriesList.size()) {
			idl_QueryResult.directoriesList[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertDirectoriesListVectorAtPos(const size_t &pos, const std::vector<CommHoleLocalizer::ImageDir> &data) {
		if(pos < idl_QueryResult.directoriesList.size()) {
			idl_QueryResult.directoriesList.insert(idl_QueryResult.directoriesList.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeDirectoriesList(const size_t &size) { idl_QueryResult.directoriesList.resize(size); }
	inline bool eraseDirectoriesListElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_QueryResult.directoriesList.size() ) {
			idl_QueryResult.directoriesList.erase(idl_QueryResult.directoriesList.begin()+pos, idl_QueryResult.directoriesList.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearDirectoriesList() { idl_QueryResult.directoriesList.clear(); }
	
	// getter and setter for element Gtd
	/**
	 * Getter methods for idl_QueryResult.gtd of type vector<short>
	 */
	inline std::vector<short>& getGtdRef() { return idl_QueryResult.gtd; }
	inline std::vector<short> getGtdCopy() const {
		return std::vector<short>(idl_QueryResult.gtd.begin(), idl_QueryResult.gtd.end());
	}
	inline short getGtdElemAtPos(const size_t &pos) const { return idl_QueryResult.gtd[pos]; }
	inline size_t getGtdSize() const { return idl_QueryResult.gtd.size(); }
	inline bool isGtdEmpty() const { return idl_QueryResult.gtd.empty(); }
	/**
	 * Setter methods for idl_QueryResult.gtd of type vector<short>
	 */
	inline QueryResultCore& setGtd(const std::vector<short> &gtd) { idl_QueryResult.gtd = gtd; return *this; }
	inline bool setGtdElemAtPos(const size_t &pos, const short &elem) {
		if(pos < idl_QueryResult.gtd.size()) {
			idl_QueryResult.gtd[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertGtdVectorAtPos(const size_t &pos, const std::vector<short> &data) {
		if(pos < idl_QueryResult.gtd.size()) {
			idl_QueryResult.gtd.insert(idl_QueryResult.gtd.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeGtd(const size_t &size) { idl_QueryResult.gtd.resize(size); }
	inline bool eraseGtdElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_QueryResult.gtd.size() ) {
			idl_QueryResult.gtd.erase(idl_QueryResult.gtd.begin()+pos, idl_QueryResult.gtd.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearGtd() { idl_QueryResult.gtd.clear(); }
};

} /* namespace CommHoleLocalizerBenchmark */
#endif /* COMMHOLELOCALIZERBENCHMARK_QUERYRESULT_CORE_H_ */
